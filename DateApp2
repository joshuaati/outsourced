import tkinter as tk
from tkinter import ttk
import datetime as dt
from dateutil.relativedelta import relativedelta

CLOCK_FONT = ('Helvetica', 90, "bold")
CLOCK_FONT2 = ("Times", 15,)
LARGE_FONT = ("Verdana", 9)

def quit():
    quit()

def pop_up():
    popup = tk.Tk()
    popup.wm_title("About")
    label = ttk.Label(popup, text="Date and Time App\nVersion 1.1\nCopyright: January, 2020", font=LARGE_FONT, justify="center")
    label.pack(pady=10, padx=10)
    popup.geometry("200x70")
    popup.mainloop()


def pop_up2():
    popup = tk.Tk()
    popup.wm_title('App Description')
    label =ttk.Label(popup, text = "The Age calculator app calculates your birthday and the number of days you "
                                   "have to the age you give it. \nThe Date comparison app calculate  the "
                                   "difference between two dates you give it.\nThe Clock app shows you the time and date", font=LARGE_FONT, justify="left")
    label.pack(pady=10, padx=10)
    popup.geometry("700x70")
    popup.mainloop()


class DateApp(tk.Tk):

    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)

        tk.Tk.iconbitmap(self, default="icon.ico")
        tk.Tk.wm_title(self, "Date and Time App")

        container = tk.Frame(self)
        container.pack(side="top", fill="both")
        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)

        menubar = tk.Menu(container)
        filemenu = tk.Menu(menubar, tearoff=0)
        filemenu.add_command(label="Start Page", command=lambda: self.show_frame(StartPage))
        filemenu.add_command(label="Age Calculator", command=lambda: self.show_frame(AgeCalculator))
        filemenu.add_command(label="Date Comparison", command=lambda: self.show_frame(DateComparison))
        filemenu.add_command(label="Clock", command=lambda: self.show_frame(ClockPage))
        filemenu.add_separator()
        filemenu.add_command(label="Quit App", command=self.quit)
        menubar.add_cascade(label="File", menu=filemenu)

        optionmenu = tk.Menu(menubar, tearoff=0)
        optionmenu.add_command(label="About", command=pop_up)
        optionmenu.add_command(label="App Description", command=pop_up2)
        menubar.add_cascade(label="Options", menu=optionmenu)

        tk.Tk.config(self, menu=menubar)

        self.frames = {}

        for F in (StartPage, AgeCalculator, DateComparison, ClockPage):
            frame = F(container, self)
            self.frames[F] = frame
            frame.grid(row=0, column=0, sticky="nsew")

        self.show_frame(StartPage)

    def show_frame(self, cont):
        frame = self.frames[cont]
        frame.tkraise()


class StartPage(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text="""This app is designed for the purpose of Fun.
        It has a clock and two date apps. 
                
        The apps can be accessed through the File menu.
        
        To continue, click ENTER.""", font=LARGE_FONT)
        label.pack(pady=10, padx=10)
        button = ttk.Button(self, text="Enter", command=lambda: controller.show_frame(ClockPage))
        button.pack(pady=1)
        button1 = ttk.Button(self, text="Exit", command=self.quit)
        button1.pack(pady=2)
        label2 = tk.Label(self, text="""To see the app description, click the button below""")
        label2.pack(pady=2, padx=10)
        button2 = ttk.Button(self, text="App Description", command=pop_up2)
        button2.pack(pady=2)


class AgeCalculator(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)

        tk.Label(self, text="Please insert date of your birth:").grid(row=1, column=2)
        tk.Label(self, text="Year(yyyy)").grid(row=2, column=1)
        tk.Label(self, text="Month(mm)").grid(row=2, column=2)
        tk.Label(self, text="Day(dd)").grid(row=2, column=3)
        tk.Label(self, text="Input the age you want the number of days to:").grid(row=5, column=2)

        self.year_entry = tk.StringVar()
        e1 = ttk.Entry(self, textvariable=self.year_entry, justify="center")
        e1.grid(row=3, column=1)

        self.month_entry = tk.StringVar()
        e2 = ttk.Entry(self, textvariable=self.month_entry, justify="center")
        e2.grid(row=3, column=2)

        self.day_entry = tk.StringVar()
        e3 = ttk.Entry(self, textvariable=self.day_entry, justify="center")
        e3.grid(row=3, column=3)

        self.nyear_entry = tk.StringVar()
        e4 = ttk.Entry(self, textvariable=self.nyear_entry, justify="center")
        e4.grid(row=6, column=2)

        b1 = ttk.Button(self, text="Calculate the number of days", command=self.age)
        b1.grid(row=10, column=2,)

        b2 = ttk.Button(self, text="Close", command=self.quit)
        b2.grid(row=10, column=3)

        b3 = ttk.Button(self, text="Calculate my Age", command=self.birthday)
        b3.grid(row=10, column=1,)

        self.t1 = tk.Text(self, height=3, width=50)
        self.t1.grid(row=8, column=1, columnspan=3)
        self.t1.tag_configure('center', justify="center")

        c1 = tk.Canvas(self, height=2, width=40)
        c1.grid(row=0, column=2)

        c2 = tk.Canvas(self, height=2, width=40)
        c2.grid(row=4, column=2)

        c3 = tk.Canvas(self, height=2, width=40)
        c3.grid(row=7, column=2)

        c4 = tk.Canvas(self, height=2, width=40)
        c4.grid(row=9, column=2)

        c5 = tk.Canvas(self, height=2, width=40)
        c5.grid(row=11, column=2)

        c6 = tk.Canvas(self, height=20, width=10)
        c6.grid(row=5, column=0)

        c7 = tk.Canvas(self, height=20, width=10)
        c7.grid(row=5, column=4)

    def age(self):
        try:
            date1 = dt.datetime(year=int(self.year_entry.get()), month=int(self.month_entry.get()), day=int(self.day_entry.get()))
            date2 = relativedelta(years=int(self.nyear_entry.get())) + date1
            date_delta = date2 - dt.datetime.now()
            statement = "You are approximately " \
                        + str(date_delta.days) + " days\naway from being " \
                        + str(self.nyear_entry.get()) + " years old...\n Your birthday would fall on a " \
                        + date2.strftime('%A')
            self.t1.delete('1.0', tk.END)
            self.t1.insert(tk.END, statement, 'center')
        except ValueError:
            pass

    def birthday(self):
        try:
            date1 = dt.datetime(year=int(self.year_entry.get()), month=int(self.month_entry.get()), day=int(self.day_entry.get()))
            date2 = dt.datetime.now()
            date_delta = (relativedelta(date2, date1))
            statement = "You are " + str(date_delta.years) + " years," + str(date_delta.months) +\
                         " months and " + str(date_delta.days) + " days old."
            self.t1.delete('1.0', tk.END)
            self.t1.insert(tk.END, statement, 'center')
        except ValueError:
            pass


class DateComparison(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)

        tk.Label(self, text="Date 1:").grid(row=1, column=2)
        tk.Label(self, text="Year(yyyy)").grid(row=2, column=1)
        tk.Label(self, text="Month(mm)").grid(row=2, column=2)
        tk.Label(self, text="Day(dd)").grid(row=2, column=3)
        tk.Label(self, text="Date 2:").grid(row=4, column=2)
        tk.Label(self, text="Year(yyyy)").grid(row=5, column=1)
        tk.Label(self, text="Month(mm)").grid(row=5, column=2)
        tk.Label(self, text="Day(dd)").grid(row=5, column=3)

        self.year_entry = tk.StringVar()
        e1 = ttk.Entry(self, textvariable=self.year_entry, justify="center")
        e1.grid(row=3, column=1)

        self.month_entry = tk.StringVar()
        e2 = ttk.Entry(self, textvariable=self.month_entry, justify="center")
        e2.grid(row=3, column=2)

        self.day_entry = tk.StringVar()
        e3 = ttk.Entry(self, textvariable=self.day_entry, justify="center")
        e3.grid(row=3, column=3)

        self.year_entry2 = tk.StringVar()
        e4 = ttk.Entry(self, textvariable=self.year_entry2, justify="center")
        e4.grid(row=6, column=1)

        self.month_entry2 = tk.StringVar()
        e5 = ttk.Entry(self, textvariable=self.month_entry2, justify="center")
        e5.grid(row=6, column=2)

        self.day_entry2 = tk.StringVar()
        e6 = ttk.Entry(self, textvariable=self.day_entry2, justify="center")
        e6.grid(row=6, column=3)

        b1 = ttk.Button(self, text="Compare", command=self.date_compare)
        b1.grid(row=10, column=1,)

        b2 = ttk.Button(self, text="Quit", command=self.quit)
        b2.grid(row=10, column=3,)

        self.t1 = tk.Text(self, height=3, width=55)
        self.t1.grid(row=8, column=1, columnspan=3)
        self.t1.tag_configure('center', justify="center")

        c1 = tk.Canvas(self, height=20, width=30)
        c1.grid(row=5, column=0)

        c2 = tk.Canvas(self, height=20, width=10)
        c2.grid(row=5, column=4)

        c3 = tk.Canvas(self, height=2, width=40)
        c3.grid(row=7, column=2)

        c4 = tk.Canvas(self, height=2, width=40)
        c4.grid(row=9, column=2)

        c5 = tk.Canvas(self, height=4, width=40)
        c5.grid(row=11, column=2)

    def date_compare(self):
        try:
            date1 = dt.datetime(year=int(self.year_entry.get()), month=int(self.month_entry.get()), day=int(self.day_entry.get()))
            date2 = dt.datetime(year=int(self.year_entry2.get()), month=int(self.month_entry2.get()), day=int(self.day_entry2.get()))
            date_delta = relativedelta(date1, date2)
            statement = "The difference between\n" + str(date1.strftime('%A,''%d ''%B ''%Y')) + " and " + \
                        str(date2.strftime('%A,''%d ''%B ''%Y')) + "\nis " + str(date_delta.years) + " years, " + \
                        str(date_delta.months) + " months and " + str(date_delta.days) + " days"
            self.t1.delete('1.0', tk.END)
            self.t1.insert(tk.END, statement, 'center')
        except ValueError:
            pass


class ClockPage(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        tk.Frame.configure(self, background="black")
        tk.Label.after(self, 1000, self.clock)

    def clock(self):
        time = dt.datetime.now()
        date = dt.datetime.today().strftime(" %A, %B %d, %Y")
        time = time.strftime("%H:%M:%S")
        tk.Label(self, text=time, font=CLOCK_FONT, foreground="white", background="black", justify='center').place(relx=0.5, rely=0.4, anchor=tk.CENTER)
        tk.Label(self, text=date, font=CLOCK_FONT2, foreground="white", background="black", justify='center').place(relx=0.5, rely=0.8, anchor=tk.CENTER)
        tk.Label.after(self, 1000, self.clock)


app = DateApp()
app.mainloop()
